RESTful verbs for all operations and methods.
Verb		Description
POST		Used to create a new item. Success returns 201 status code with newly created json item in body.
GET			Used to select one or more items. Success returns 200 status code with json result item(s) in body.
PUT			Used to update an item. Success returns 200 status code with updated json item in body.
DELETE		Used to delete an item. Success returns 204 status code with no body.

Respond with one of the following status codes.
Code		Description
200			Success. Request completed.
201			Success. New resource created.
204			Success. No content to return. Only the status code returns.
400			Bad Request - The request could not be parsed.
401			Unauthorized - user is not logged in, cannot access resource.
404			Not Found - resource doesn't exist.
422			Unprocessable Entity - The request could not be parsed due to validation errors.
429			Rate limit exceeded, try again later.
500			Server error.

------------------------------------

Health Check

	GET /test
		Returns status information (200 if OK)
				
	
Users
	The USER object
		id			string
		email		string
		name		
		  first     string
		  last      string
		admin       boolean			    ??? needed?  
		photo_url	string
		authored    [Article]			The user's list of authored work
		purchased	[Article]			The user's list of purchased articles
		created		timestamp
		updated		timestamp

	POST /users
		Creates a new user (reader, author)
		
		Params: "email"
		
	GET /users
		Retrieves a list of all users
		
	GET /users?email={email}
		Check if a user is registered with the provided e-mail
		
		Returns: 200, if successful. 404, if the user doesn't exist.
							
	GET /users/{id}
		Fetches the user given the id
		
	PUT /users/{id}
		If exists, update the user at the provided id. Otherwise, error.
		
	DELETE /users/{id}
		Remove the account
	
	GET /users/{id}/articles
		Get all of the articles created under this user
		
Articles
	The ARTICLE object
		id				string
		language		string
		title			string
		rating			integer
		author			Author
		sections		[Section]
		created			timestamp
		updated			timestamp

	POST /articles
		Create a new article for the user at {id}
		
		Params: "user (required)", "language", "title"
				
	GET /articles/{id}
		Fetches the article given the {id}
		
	PUT /articles/{id}
		Updates an existing article
		
		Params: "language", "title"
		
	DELETE /articles/{id}
		Deletes an article
		
		
Sections
	The SECTION object
		id				string
		index			integer
		locked			boolean			// is this content available?
		title			string
		rating			integer
		layout			[Layout]
		created			timestamp
		updated			timestamp

	POST /sections
		When you create a new section you must select which article to add it to
		
		Params: "article (required)", "title"
				
	GET /sections/{id}
		Retrieve a section from an article
		
	PUT /sections/{id}
		Updates a section of an article
	
	DELETE /sections/{id}
		Deletes a section from an article
		
	

Layouts
    Layouts help authors create a consistent experience across all of their work. 
    	
	The LAYOUT object
		id				string
		layout_type		LayoutType
		header			string
		text			string
		photo_url		string
		movie_url		string
		actions			
		  - text	    string
		  - is_answer   boolean
		created			timestamp
		updated			timestamp
		
	POST /layouts
		Create a new layout item for a section
		
		Params: "section (required)"
		
	PUT /layouts/{id}
		Update a layout
		
	DELETE /layouts/{id}
		Delete the layout item at the provided index
		
	
		